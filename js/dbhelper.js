var restaurantDb=idb.open("restaurants-db",1,t=>{t.createObjectStore("restaurant",{keyPath:"id"})});class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants/"}static queryDB(t=""){return fetch(`${DBHelper.DATABASE_URL}${t}`).then(t=>{if(!t.ok)throw new Error(`Request failed. Returned status of ${t.status}`);return t.json()}).catch(t=>{console.error(t)})}static storeRestaurant(t){return restaurantDb.then(e=>{const r=e.transaction("restaurant","readwrite");return r.objectStore("restaurant").put(t),r.complete})}static getRestaurant(t=null){return restaurantDb.then(e=>{const r=e.transaction("restaurant").objectStore("restaurant");let a;return a=null!=t?r.get(Number(t)):r.getAll()})}static fetchRestaurants(t){console.log("Fetching restaurants"),DBHelper.getRestaurant().then(e=>{DBHelper.queryDB().then(t=>{if(t)return t.forEach(t=>{if(!DBHelper.storeRestaurant(t))throw new Error(`Error saving restaurant ${t.id} to db`)}),t}).then(r=>{t(null,0!=e.length?e:r)})}).catch(e=>{t(e,null)})}static fetchRestaurantById(t,e){console.log(`Fetching restaurant ${t}`),DBHelper.getRestaurant(t).then(r=>{DBHelper.queryDB(t).then(t=>{if(t){if(!DBHelper.storeRestaurant(t))throw new Error(`Error saving restaurant ${t.id} to db`);return t}}).then(t=>{e(null,r||t)})}).catch(t=>{e(t,null)})}static fetchRestaurantByCuisine(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.cuisine_type==t);e(null,r)}})}static fetchRestaurantByNeighborhood(t,e){DBHelper.fetchRestaurants((r,a)=>{if(r)e(r,null);else{const r=a.filter(e=>e.neighborhood==t);e(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(t,e,r){DBHelper.fetchRestaurants((a,n)=>{if(a)r(a,null);else{let a=n;"all"!=t&&(a=a.filter(e=>e.cuisine_type==t)),"all"!=e&&(a=a.filter(t=>t.neighborhood==e)),r(null,a)}})}static fetchNeighborhoods(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].neighborhood),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static fetchCuisines(t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.map((t,e)=>r[e].cuisine_type),a=e.filter((t,r)=>e.indexOf(t)==r);t(null,a)}})}static urlForRestaurant(t){return`./restaurant.html?id=${t.id}`}static imageUrlForRestaurant(t){return`/img/${t.photograph}`}static mapMarkerForRestaurant(t,e){const r=new L.marker([t.latlng.lat,t.latlng.lng],{title:t.name,alt:t.name,url:DBHelper.urlForRestaurant(t)});return r.addTo(newMap),r}}
//# sourceMappingURL=../maps/dbhelper.js.map
