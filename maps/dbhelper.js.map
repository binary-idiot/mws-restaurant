{"version":3,"sources":["dbhelper.js"],"names":["restaurantDb","idb","open","db","createObjectStore","keyPath","DBHelper","DATABASE_URL","[object Object]","id","fetch","then","response","ok","Error","status","json","catch","error","console","restaurant","tx","transaction","objectStore","put","complete","restaurantStore","get","Number","getAll","callback","log","getRestaurant","restaurants","queryDB","forEach","storeRestaurant","fetchedRestaurants","length","fetchedRestaurant","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","L","latlng","lat","lng","title","name","alt","url","urlForRestaurant","addTo","newMap"],"mappings":"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","file":"../js/dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\n\r\nvar restaurantDb = idb.open('restaurants-db', 1, db => {\r\n  const restaurantStore = db.createObjectStore('restaurant', {keyPath: 'id'});\r\n});\r\n\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337 // Change this to your server port\r\n    return `http://localhost:${port}/restaurants/`;\r\n  }\r\n\r\n  static queryDB(id = ''){\r\n    return fetch(`${DBHelper.DATABASE_URL}${id}`).then(response => {\r\n      if(!response.ok)\r\n        throw new Error(`Request failed. Returned status of ${response.status}`);\r\n      return response.json();\r\n    }).catch(error => {\r\n      console.error(error);\r\n    });\r\n  }\r\n\r\n  static storeRestaurant(restaurant) {\r\n    return restaurantDb.then( db => {\r\n      const tx = db.transaction('restaurant', 'readwrite');\r\n      const restaurantStore = tx.objectStore('restaurant');\r\n      restaurantStore.put(restaurant);\r\n      return tx.complete;\r\n    });\r\n  }\r\n\r\n  static getRestaurant(id = null) {\r\n    return restaurantDb.then(db => {\r\n      const tx = db.transaction('restaurant');\r\n      const restaurantStore = tx.objectStore('restaurant');\r\n      let response;\r\n      if(id != null){\r\n        response = restaurantStore.get(Number(id));\r\n      }else{\r\n        response = restaurantStore.getAll();\r\n      }\r\n      return response;\r\n    });\r\n  }\r\n\r\n  // fetchRestaurants and fetchRestaurantByID act as interfaces for queryDB to ensure compatability with stage 1 functions\r\n\r\n  /**\r\n   * Fetch all restaurants.\r\n   */\r\n  static fetchRestaurants(callback) {\r\n    console.log(\"Fetching restaurants\");\r\n    DBHelper.getRestaurant().then(restaurants => {\r\n\r\n    DBHelper.queryDB().then(response => {\r\n        if(response){\r\n          response.forEach(restaurant => {\r\n            if(!DBHelper.storeRestaurant(restaurant))\r\n              throw new Error(`Error saving restaurant ${restaurant.id} to db`);\r\n          })\r\n          return response;\r\n        }\r\n      }).then(fetchedRestaurants => {\r\n        callback(null, (restaurants.length != 0) ? restaurants : fetchedRestaurants);\r\n      });\r\n\r\n    }).catch(error => {\r\n      callback(error, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\r\n  static fetchRestaurantById(id, callback) {\r\n    console.log(`Fetching restaurant ${id}`)\r\n\r\n    DBHelper.getRestaurant(id).then(restaurant => {\r\n\r\n      const fetchedRestaurant = DBHelper.queryDB(id).then(response => {\r\n        if(response){\r\n          if(!DBHelper.storeRestaurant(response))\r\n            throw new Error(`Error saving restaurant ${response.id} to db`);\r\n          return response;\r\n        }\r\n      }).then(fetchedRestaurant => {\r\n        \r\n        callback(null, (restaurant) ? restaurant : fetchedRestaurant);\r\n      });\r\n\r\n    }).catch(error => {\r\n      callback(error, null);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine, callback) {\r\n    // Fetch all restaurants  with proper error handling\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given cuisine type\r\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Filter restaurants to have only given neighborhood\r\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        let results = restaurants\r\n        if (cuisine != 'all') { // filter by cuisine\r\n          results = results.filter(r => r.cuisine_type == cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // filter by neighborhood\r\n          results = results.filter(r => r.neighborhood == neighborhood);\r\n        }\r\n        callback(null, results);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all neighborhoods from all restaurants\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n        // Remove duplicates from neighborhoods\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n        callback(null, uniqueNeighborhoods);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines(callback) {\r\n    // Fetch all restaurants\r\n    DBHelper.fetchRestaurants((error, restaurants) => {\r\n      if (error) {\r\n        callback(error, null);\r\n      } else {\r\n        // Get all cuisines from all restaurants\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n        // Remove duplicates from cuisines\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n        callback(null, uniqueCuisines);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`./restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant) {\r\n    return (`/img/${restaurant.photograph}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n   static mapMarkerForRestaurant(restaurant, map) {\r\n    // https://leafletjs.com/reference-1.3.0.html#marker  \r\n    const marker = new L.marker([restaurant.latlng.lat, restaurant.latlng.lng],\r\n      {title: restaurant.name,\r\n      alt: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant)\r\n      })\r\n      marker.addTo(newMap);\r\n    return marker;\r\n  } \r\n  /* static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: restaurant.name,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP}\r\n    );\r\n    return marker;\r\n  } */\r\n\r\n}\r\n\r\n"]}