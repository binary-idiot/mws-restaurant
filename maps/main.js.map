{"version":3,"sources":["main.js"],"names":["restaurants","neighborhoods","cuisines","newMap","markers","document","addEventListener","event","SWHelper","registerServiceWorker","initMap","fetchNeighborhoods","fetchCuisines","DBHelper","error","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","fillCuisinesHTML","cuisine","L","map","center","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","marker","remove","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","imgSrc","imageUrlForRestaurant","className","src","srcset","sizes","alt","name","address","adr","replace","more","href","urlForRestaurant","setAttribute","mapMarkerForRestaurant","on","window","location","options","url","push"],"mappings":"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","file":"../js/main.js","sourcesContent":["let restaurants,\r\n  neighborhoods,\r\n  cuisines\r\nvar newMap\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n  SWHelper.registerServiceWorker();\r\n  initMap(); // added \r\n  fetchNeighborhoods();\r\n  fetchCuisines();\r\n});\r\n\r\n\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nfetchNeighborhoods = () => {\r\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n    if (error) { // Got an error\r\n      console.error(error);\r\n    } else {\r\n      self.neighborhoods = neighborhoods;\r\n      fillNeighborhoodsHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n  const select = document.getElementById('neighborhoods-select');\r\n  neighborhoods.forEach(neighborhood => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = neighborhood;\r\n    option.value = neighborhood;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nfetchCuisines = () => {\r\n  DBHelper.fetchCuisines((error, cuisines) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.cuisines = cuisines;\r\n      fillCuisinesHTML();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nfillCuisinesHTML = (cuisines = self.cuisines) => {\r\n  const select = document.getElementById('cuisines-select');\r\n\r\n  cuisines.forEach(cuisine => {\r\n    const option = document.createElement('option');\r\n    option.innerHTML = cuisine;\r\n    option.value = cuisine;\r\n    select.append(option);\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize leaflet map, called from HTML.\r\n */\r\ninitMap = () => {\r\n  self.newMap = L.map('map', {\r\n        center: [40.722216, -73.987501],\r\n        zoom: 12,\r\n        scrollWheelZoom: false\r\n      });\r\n  L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n    mapboxToken: 'pk.eyJ1IjoiYmluYXJ5aWRpb3QiLCJhIjoiY2pqMzZjNWRtMWF2YTNrbXRsb2VueGlydyJ9.mkjp31-552zW210Dz1PUcQ',\r\n    maxZoom: 18,\r\n    attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n      '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n      'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n    id: 'mapbox.streets'\r\n  }).addTo(newMap);\r\n\r\n  updateRestaurants();\r\n}\r\n/* window.initMap = () => {\r\n  let loc = {\r\n    lat: 40.722216,\r\n    lng: -73.987501\r\n  };\r\n  self.map = new google.maps.Map(document.getElementById('map'), {\r\n    zoom: 12,\r\n    center: loc,\r\n    scrollwheel: false\r\n  });\r\n  updateRestaurants();\r\n} */\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nupdateRestaurants = () => {\r\n  const cSelect = document.getElementById('cuisines-select');\r\n  const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n  const cIndex = cSelect.selectedIndex;\r\n  const nIndex = nSelect.selectedIndex;\r\n\r\n  const cuisine = cSelect[cIndex].value;\r\n  const neighborhood = nSelect[nIndex].value;\r\n\r\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      resetRestaurants(restaurants);\r\n      fillRestaurantsHTML();\r\n    }\r\n  })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nresetRestaurants = (restaurants) => {\r\n  // Remove all restaurants\r\n  self.restaurants = [];\r\n  const ul = document.getElementById('restaurants-list');\r\n  ul.innerHTML = '';\r\n\r\n  // Remove all map markers\r\n  if (self.markers) {\r\n    self.markers.forEach(marker => marker.remove());\r\n  }\r\n  self.markers = [];\r\n  self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n  const ul = document.getElementById('restaurants-list');\r\n  restaurants.forEach(restaurant => {\r\n    ul.append(createRestaurantHTML(restaurant));\r\n  });\r\n  addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\ncreateRestaurantHTML = (restaurant) => {\r\n  const li = document.createElement('li');\r\n\r\n  const image = document.createElement('img');\r\n  const imgSrc = DBHelper.imageUrlForRestaurant(restaurant); \r\n  image.className = 'restaurant-img';\r\n  image.src = `${ imgSrc }-small.jpg`;\r\n  image.srcset = `${ imgSrc }-small.jpg 300w, ${ imgSrc }-medium.jpg 600w, ${ imgSrc }-large.jpg 800w`;\r\n  image.sizes = '(max-width: 424px) 300px, (max-width: 573px) 449px, 300px';\r\n  image.alt = restaurant.alt;\r\n  li.append(image);\r\n\r\n  const name = document.createElement('h2');\r\n  name.innerHTML = restaurant.name;\r\n  li.append(name);\r\n\r\n  const neighborhood = document.createElement('p');\r\n  neighborhood.innerHTML = restaurant.neighborhood;\r\n  li.append(neighborhood);\r\n\r\n  const address = document.createElement('p');\r\n  const adr = restaurant.address.replace(/,/, ',<br>');\r\n  address.innerHTML = adr;\r\n  li.append(address);\r\n\r\n  const more = document.createElement('a');\r\n  more.innerHTML = 'View Details';\r\n  more.href = DBHelper.urlForRestaurant(restaurant);\r\n  more.setAttribute('role', 'button')\r\n  li.append(more)\r\n\r\n  return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\naddMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.newMap);\r\n    marker.on(\"click\", onClick);\r\n    function onClick() {\r\n      window.location.href = marker.options.url;\r\n    }\r\n    self.markers.push(marker);\r\n  });\r\n\r\n} \r\n/* addMarkersToMap = (restaurants = self.restaurants) => {\r\n  restaurants.forEach(restaurant => {\r\n    // Add marker to the map\r\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n    google.maps.event.addListener(marker, 'click', () => {\r\n      window.location.href = marker.url\r\n    });\r\n    self.markers.push(marker);\r\n  });\r\n} */\r\n\r\n"]}