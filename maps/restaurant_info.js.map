{"version":3,"sources":["restaurant_info.js"],"names":["restaurant","newMap","document","addEventListener","event","SWHelper","registerServiceWorker","initMap","fetchRestaurantFromURL","error","console","self","L","map","center","latlng","lat","lng","zoom","scrollWheelZoom","tileLayer","mapboxToken","maxZoom","attribution","id","addTo","fillBreadcrumb","DBHelper","mapMarkerForRestaurant","callback","getParameterByName","fetchRestaurantById","fillRestaurantHTML","getElementById","innerHTML","name","address","image","imgSrc","imageUrlForRestaurant","className","src","srcset","size","alt","cuisine_type","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","oh","replace","reviews","container","title","noReviews","ul","forEach","review","createReviewHTML","li","header","classList","add","date","content","rating","comments","breadcrumb","url","window","location","href","results","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"../js/restaurant_info.js","sourcesContent":["let restaurant;\r\nvar newMap;\r\n\r\n/**\r\n * Initialize map as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {  \r\n  SWHelper.registerServiceWorker();\r\n  initMap();\r\n});\r\n\r\n/**\r\n * Initialize leaflet map\r\n */\r\ninitMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {      \r\n      self.newMap = L.map('map', {\r\n        center: [restaurant.latlng.lat, restaurant.latlng.lng],\r\n        zoom: 16,\r\n        scrollWheelZoom: false\r\n      });\r\n      L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}', {\r\n        mapboxToken: 'pk.eyJ1IjoiYmluYXJ5aWRpb3QiLCJhIjoiY2pqMzZjNWRtMWF2YTNrbXRsb2VueGlydyJ9.mkjp31-552zW210Dz1PUcQ',\r\n        maxZoom: 18,\r\n        attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, ' +\r\n          '<a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' +\r\n          'Imagery Â© <a href=\"https://www.mapbox.com/\">Mapbox</a>',\r\n        id: 'mapbox.streets'    \r\n      }).addTo(newMap);\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.newMap);\r\n    }\r\n  });\r\n}  \r\n \r\n/* window.initMap = () => {\r\n  fetchRestaurantFromURL((error, restaurant) => {\r\n    if (error) { // Got an error!\r\n      console.error(error);\r\n    } else {\r\n      self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        center: restaurant.latlng,\r\n        scrollwheel: false\r\n      });\r\n      fillBreadcrumb();\r\n      DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n    }\r\n  });\r\n} */\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nfetchRestaurantFromURL = (callback) => {\r\n  if (self.restaurant) { // restaurant already fetched!\r\n    callback(null, self.restaurant)\r\n    return;\r\n  }\r\n  const id = getParameterByName('id');\r\n  if (!id) { // no id found in URL\r\n    error = 'No restaurant id in URL'\r\n    callback(error, null);\r\n  } else {\r\n    DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n      self.restaurant = restaurant;\r\n      if (!restaurant) {\r\n        console.error(error);\r\n        return;\r\n      }\r\n      fillRestaurantHTML();\r\n      callback(null, restaurant)\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nfillRestaurantHTML = (restaurant = self.restaurant) => {\r\n  const name = document.getElementById('restaurant-name');\r\n  name.innerHTML = restaurant.name;\r\n\r\n  const address = document.getElementById('restaurant-address');\r\n  address.innerHTML = restaurant.address;\r\n\r\n  const image = document.getElementById('restaurant-img');\r\n  const imgSrc =  DBHelper.imageUrlForRestaurant(restaurant);\r\n  image.className = 'restaurant-img'\r\n  image.src = `${ imgSrc }-small.jpg`;\r\n  image.srcset = `${ imgSrc }-small.jpg 300w, ${ imgSrc }-medium.jpg 600w, ${ imgSrc }-large.jpg 800w`;\r\n  image.size = '(max-width: 767) calc(100% - 30px), calc(50% - 30px)';\r\n  image.alt = restaurant.alt;\r\n\r\n  const cuisine = document.getElementById('restaurant-cuisine');\r\n  cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n  // fill operating hours\r\n  if (restaurant.operating_hours) {\r\n    fillRestaurantHoursHTML();\r\n  }\r\n  // fill reviews\r\n  fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nfillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n  const hours = document.getElementById('restaurant-hours');\r\n  for (let key in operatingHours) {\r\n    const row = document.createElement('tr');\r\n\r\n    const day = document.createElement('td');\r\n    day.innerHTML = key;\r\n    row.appendChild(day);\r\n\r\n    const time = document.createElement('td');\r\n    const oh = operatingHours[key].replace(/,/, '<br>');\r\n    time.innerHTML = oh;\r\n    row.appendChild(time);\r\n\r\n    hours.appendChild(row);\r\n  }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nfillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n  const container = document.getElementById('reviews-container');\r\n  const title = document.createElement('h3');\r\n  title.innerHTML = 'Reviews';\r\n  container.appendChild(title);\r\n\r\n  if (!reviews) {\r\n    const noReviews = document.createElement('p');\r\n    noReviews.innerHTML = 'No reviews yet!';\r\n    container.appendChild(noReviews);\r\n    return;\r\n  }\r\n  const ul = document.getElementById('reviews-list');\r\n  reviews.forEach(review => {\r\n    ul.appendChild(createReviewHTML(review));\r\n  });\r\n  container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\ncreateReviewHTML = (review) => {\r\n  const li = document.createElement('li');\r\n\r\n  const header = document.createElement('div');\r\n  header.classList.add(\"review-header\");\r\n\r\n  const name = document.createElement('p');\r\n  name.innerHTML = review.name;\r\n  name.classList.add('review-name');\r\n  header.appendChild(name);\r\n\r\n  const date = document.createElement('p');\r\n  date.innerHTML = review.date;\r\n  date.classList.add('review-date');\r\n  header.appendChild(date);\r\n\r\n  const content = document.createElement('div');\r\n  content.classList.add(\"review-content\");\r\n\r\n  const rating = document.createElement('p');\r\n  rating.innerHTML = `Rating: ${review.rating}`;\r\n  rating.classList.add('review-rating');\r\n  content.appendChild(rating);\r\n\r\n  const comments = document.createElement('p');\r\n  comments.innerHTML = review.comments;\r\n  comments.classList.add('review-comments');\r\n  content.appendChild(comments);\r\n\r\n  li.appendChild(header);\r\n  li.appendChild(content);\r\n\r\n  return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nfillBreadcrumb = (restaurant=self.restaurant) => {\r\n  const breadcrumb = document.getElementById('breadcrumb');\r\n  const li = document.createElement('li');\r\n  li.innerHTML = restaurant.name;\r\n  breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\ngetParameterByName = (name, url) => {\r\n  if (!url)\r\n    url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n  const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n    results = regex.exec(url);\r\n  if (!results)\r\n    return null;\r\n  if (!results[2])\r\n    return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}